{
    "titulo": "Challenge: Two Sum",
    "descricao": "In this solution, we address the problem using efficient algorithms to find two numbers in a list that sum to a given target.",
    "diagramaAtividades": "imagens/two-sum_diagrama_atividades.svg",
    "codigo": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        # Create a dictionary (hash map) to store visited numbers and their indices.\n        # The key will be the number's value, and the value will be the index where it appears.\n        num_to_index = {}\n\n        # Iterate through the list using the enumerate function, which provides\n        # both the index (i) and the value of the current element (num).\n        for i, num in enumerate(nums):\n            # Calculate the complement needed to reach the target.\n            # Complement is the difference between the target and the current number.\n            complement = target - num\n\n            # Check if the complement has already been seen earlier,\n            # i.e., if it exists in the num_to_index dictionary.\n            if complement in num_to_index:\n                # If the complement is in the dictionary, we found the solution.\n                # Return a list with the indices of the complement and the current number.\n                return [num_to_index[complement], i]\n\n            # If the complement is not found, store the current number\n            # in the num_to_index dictionary with its position as the value.\n            num_to_index[num] = i"
}
