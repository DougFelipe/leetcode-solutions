{
    "titulo": "Challenge: Two Sum",
    "descricao": "In this solution, we address the problem using efficient algorithms to find two numbers in an array that sum to a given target.",
    "diagramaPseudocodigo": "imagens/java_diagrama_pseudocodigo1.png",
    "diagramaAtividades": "imagens/java_diagrama_atividades1.png",
    "codigo": "import java.util.HashMap;\n\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        // Create a HashMap to store visited numbers and their indices.\n        // The key will be the value of the number, and the value will be the index where it appears.\n        HashMap<Integer, Integer> numToIndex = new HashMap<>();\n        \n        // Iterate through the nums array using a for loop.\n        for (int i = 0; i < nums.length; i++) {\n            // Calculate the complement needed to reach the target.\n            // Complement is the difference between the target and the current number.\n            int complement = target - nums[i];\n            \n            // Check if the complement is already in the HashMap.\n            if (numToIndex.containsKey(complement)) {\n                // If the complement is in the HashMap, we found the solution.\n                // Return an array with the indices of the complement and the current number.\n                return new int[] { numToIndex.get(complement), i };\n            }\n            \n            // If the complement is not found, store the current number\n            // in the HashMap with its position as the value.\n            numToIndex.put(nums[i], i);\n        }\n        \n        // Note: According to the problem definition, there will always be exactly one solution,\n        // so the code will never reach here. We can throw an exception for safety.\n        throw new IllegalArgumentException(\"No solution found!\");\n    }\n}"
}
